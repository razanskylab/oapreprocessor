{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"noise",
				"noiseVec"
			],
			[
				"filter",
				"filterFreq"
			],
			[
				"minFluen",
				"minFluenceLog"
			],
			[
				"sliceFluence",
				"sliceFluenceLog"
			],
			[
				"currSlice",
				"currSliceFluence"
			],
			[
				"currS",
				"currSliceFluence"
			],
			[
				"atomi",
				"atomicAdd"
			],
			[
				"fluence",
				"fluence_dev"
			],
			[
				"fluence_",
				"fluence_log"
			],
			[
				"curand",
				"curand_uniform"
			],
			[
				"new",
				"newTube"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"const",
				"constArgsIn"
			],
			[
				"get_max",
				"get_maxMaterial"
			],
			[
				"tissue",
				"tissueProps"
			],
			[
				"abso",
				"absorbed"
			],
			[
				"fileP",
				"filePathString"
			],
			[
				"ui",
				"uint32_t"
			],
			[
				"update",
				"update_plot"
			],
			[
				"tissu",
				"tissueTypes"
			],
			[
				"optProp",
				"optPropHost"
			],
			[
				"optPro",
				"optPropHost"
			],
			[
				"tiss",
				"tissue"
			],
			[
				"optPr",
				"optPropHost"
			],
			[
				"opt",
				"optProps"
			],
			[
				"maxVal",
				"maxValLog"
			],
			[
				"Input",
				"InputFloat3"
			],
			[
				"is",
				"is_volume_generated"
			],
			[
				"bgMater",
				"bgMaterialId"
			],
			[
				"lower",
				"lowerCorner"
			],
			[
				"tisseu",
				"tissueTypes"
			],
			[
				"flag",
				"flagVerbose"
			],
			[
				"sens",
				"sensField"
			],
			[
				"crop",
				"cropZStart"
			],
			[
				"fie",
				"field_height"
			],
			[
				"field",
				"field_width"
			],
			[
				"iput",
				"inputMatrixA"
			],
			[
				"inptu",
				"inputMatrixB"
			],
			[
				"inpt",
				"inputMatrixA"
			],
			[
				"matrix",
				"matrixB_dev"
			],
			[
				"fla",
				"float4kernel"
			],
			[
				"simProp",
				"simProperties"
			],
			[
				"fiber",
				"fiberProperties"
			],
			[
				"target_lin",
				"target_link_libraries\tbuiltin"
			],
			[
				"heat_",
				"heat_log"
			],
			[
				"target",
				"target_link_libraries\tcommand"
			],
			[
				"add",
				"add_library\tcommand"
			]
		]
	},
	"buffers":
	[
		{
			"file": "@Preprocessor/Preprocessor.m",
			"settings":
			{
				"buffer_size": 1905,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "@PreprocSettings/PreprocSettings.m",
			"settings":
			{
				"buffer_size": 1602,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "% File: Detect_Surface.m @ Preprocessor\n% Author: Urs Hofmann\n% Mail: hofmannu@biomed.ee.ethz.ch\n% Date: 26.12.2020\n\n% Description: Detects the surface of the skin based on different methods and generates\n% a z shift array\n\n% Literature: \n\nfunction Detect_Surface(pp, varargin)\n\n\t% default argumemts\n\tSOS = pp.preprocSett.SOS;\n\tnoiseFact = 1;\n\tkernelSize = [5, 5, 3]; % size for kernel used to segment surface area\n\tboundaries = [50, 5];\n\t\n\t% read in user defined settings\n\tfor iargin = 1:2:(nargin - 1)\n\t\tswitch varargin{iargin}\n\t\t\tcase 'SOS'\n\t\t\t\tSOS = varargin{iargin + 1};\n\t\t\totherwise\n\t\t\t\terror(\"Invalid argument passed to function\");\n\t\tend\n\tend\n\n\t% Make sure to load raw data and preprocess with low pass filter\n\toldFilterFreq =  pp.preprocSett.filterFreq;\n\tpp.preprocSett.filterFreq = [0.5e6, 25e6];\n\tpp.Load_Raw_Data();\n\tpp.Preproc_Data();\n\tpp.preprocSett.filterFreq = oldFilterFreq;\n\n\t[nT, nX, nY] = size(pp.preprocVol.vol);\n\n\t% generate hilbert transformation of volume\n\tpp.VPrintf('Calculating hilbert transform of dataset... ', 1);\n\tdata = pp.preprocVol.vol;\n\tdata = reshape(data, [nT, nX * nY]);\n\tdata = abs(hilbert(data));\n\tdata = reshape(data, [nT, nX, nY]);\n\tpp.VPrintf('done!\\n', 0);\n\n\t% median fitler to generate segmentation mask {strong ifilter}\n\tdataFit = medfilt3(data, kernelSize);\n\tnoiseVec = data(:);\n\tnoiseLvl = std(noiseVec) * noiseFact\n\n\t% find stratum corneum region\n\t\n\t% [~, firstLight] = max(dataFit > noiseLvl, [], 1);\n\t[~, firstLight] = max(dataFit, [], 1);\n\tfirstLight = reshape(firstLight, [nX, nY]);\n\t\n\t% generate smoothened surface\n\tpp.VPrintf('Generating B scan wise fit functions... ', 1);\n\t% gridX = repmat(pp.preprocVol.vecX', [1, nY]);\n\t% gridY = repmat(pp.preprocVol.vecY, [nX, 1]);\n\t% [sf, gof] = fit([double(gridX(:)), double(gridY(:))], double(firstLight(:)), ...\n\t% \t'poly55');\n\t% fitSurface = sf(gridX(:), gridY(:));\n\t% fitSurface = reshape(fitSurface, [nX, nY]);\n\n\tbscanFit = zeros(nX, nY);\n\tvecX = pp.preprocVol.vecX';\n\tfor (iY = 1:nY)\n\t\tsf = fit(double(vecX), double(firstLight(:, iY)), 'poly2');\n\t\tbscanFit(:, iY) = sf(vecX);\n\tend\n\tpp.VPrintf('done!\\n', 0);\n\n\t% set far away regions to 0\n\tgridX = repmat(pp.preprocVol.vecX', [1, nY]);\n\tgridY = repmat(pp.preprocVol.vecY, [nX, 1]);\n\t[sf, gof] = fit([double(gridX(:)), double(gridY(:))], double(bscanFit(:)), ...\n\t\t'poly55');\n\tfitSurface = sf(gridX(:), gridY(:));\n\tfitSurface = reshape(fitSurface, [nX, nY]);\n\n\tdata = reshape(data, [nT, nX * nY]);\n\tfitSurface = reshape(fitSurface, [1, nX * nY]);\n\tfor iAScan = 1:(nX * nY)\n\t\tidxStart = round(fitSurface(iAScan)) - boundaries(1);\n\t\tif (idxStart < 1)\n\t\t\tidxStart = 1;\n\t\tend\n\t\tif (idxStart > nT)\n\t\t\tidxStart = nT;\n\t\tend\n\t\tidxEnd = round(fitSurface(iAScan)) + boundaries(2);\n\t\tif (idxEnd < 1)\n\t\t\tidxEnd = 1;\n\t\tend\n\t\tif (idxEnd > nT)\n\t\t\tidxEnd = nT;\n\t\tend\n\n\t\tdata(1:idxStart, iAScan) = 0;\n\t\tdata(idxEnd:end, iAScan) = 0;\n\tend\n\n\t[~, firstLight] = max(data, [], 1);\n\tfirstLight = reshape(firstLight, [nX, nY]);\n\t\n\t% generate smoothened surface\n\tpp.VPrintf('Generating B scan wise fit functions... ', 1);\n\tbscanFit = zeros(nX, nY);\n\tvecX = pp.preprocVol.vecX';\n\tfor (iY = 1:nY)\n\t\tsf = fit(double(vecX), double(firstLight(:, iY)), 'poly2');\n\t\tbscanFit(:, iY) = sf(vecX);\n\tend\n\tpp.VPrintf('done!\\n', 0);\n\n\tpp.VPrintf('Generating smoothed skin surface... ', 1);\n\tgridX = repmat(pp.preprocVol.vecX', [1, nY]);\n\tgridY = repmat(pp.preprocVol.vecY, [nX, 1]);\n\t[sf, gof] = fit([double(gridX(:)), double(gridY(:))], double(bscanFit(:)), ...\n\t\t'poly55');\n\tfitSurface = sf(gridX(:), gridY(:));\n\tfitSurface = reshape(fitSurface, [nX, nY]);\n\tpp.VPrintf('done!', 0);\n\n\t% convert delta between fit and firstLight into shift matrix\n\tpp.surfMeasured = bscanFit;\n\tpp.surfFit = fitSurface;\n\tpp.deltaZ = (fitSurface - bscanFit);\n\tpp.deltaZ = pp.deltaZ / pp.scanSett.samplingFreq;\n\tpp.deltaZ = pp.deltaZ * pp.preprocSett.SOS;\n\n\n\tif pp.flagDisplay()\n\t\t% generate random plot positiions along x and y\n\t\trandX = randi(nX);\n\t\trandY = randi(nY);\n\n\t\t% shift two planes to show effect\n\t\tpp.VPrintf('Run example shift... ', 1);\n\t\t% shiftedX = abs(squeeze(pp.preprocVol.vol(:, centerX, :)));\n\t\tshiftedX = abs(squeeze(pp.preprocVol.vol(:, :, randY)));\n\t\tshiftedX = reshape(shiftedX, [nT, nX]);\n\t\tshiftVec = round(fitSurface(:, randY) - bscanFit(:, randY));\n\t\tfor (iX = 1:nX)\n\t\t\tshiftedX(:, iX) = circshift(shiftedX(:, iX), shiftVec(iX));\n\t\tend\n\n\t\t% shiftedY = abs(squeeze(pp.preprocVol.vol(:, :, randY)));\n\t\tshiftedY = abs(squeeze(pp.preprocVol.vol(:, randX, :)));\n\t\tshiftedY = reshape(shiftedY, [nT, nY]);\n\t\tshiftVec = round(fitSurface(randX, :) - bscanFit(randX, :));\n\t\tfor (iY = 1:nY)\n\t\t\tshiftedY(:, iY) = circshift(shiftedY(:, iY), shiftVec(iY));\n\t\tend\n\t\tpp.VPrintf('done!\\n', 0);\n\n\t\tfigure();\n\n\t\tax1 = subplot(2, 2, 1);\n\t\tsliceX = abs(squeeze(pp.preprocVol.vol(:, :, randY)));\n\t\timagesc(sliceX);\n\t\thold on\n\t\tplot(firstLight(:, randY), 'g-');\n\t\tplot(bscanFit(:, randY), 'r--');\n\t\tplot(bscanFit(:, randY) - boundaries(1), 'r:');\n\t\tplot(bscanFit(:, randY) + boundaries(2), 'r:');\n\t\tcolormap(ax1, bone(1024));\n\t\tcolorbar\n\n\t\tax2 = subplot(2, 2, 2);\n\t\tsliceY = abs(squeeze(pp.preprocVol.vol(:, randX, :)));\n\t\timagesc(sliceY);\n\t\thold on\n\t\tplot(firstLight(randX, :), 'g-');\n\t\tplot(bscanFit(randX, :), 'r--');\n\t\tplot(bscanFit(randX, :) - boundaries(1), 'r:');\n\t\tplot(bscanFit(randX, :) + boundaries(2), 'r:');\n\t\tcolormap(ax2, bone(1024));\n\t\tcolorbar\n\n\t\tax3 = subplot(2, 2, 3);\n\t\timagesc(shiftedX);\n\t\tcolormap(ax3, bone(1024))\n\n\t\tax4 = subplot(2, 2, 4);\n\t\timagesc(shiftedY)\n\t\tcolormap(ax4, bone(1024))\n\n\t\tdrawnow();\n\tend\n\nend",
			"file": "@Preprocessor/Detect_Surface.m",
			"file_size": 5866,
			"file_write_time": 132537925439440361,
			"settings":
			{
				"buffer_size": 5530,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Utility/skin_movement_model.m",
			"settings":
			{
				"buffer_size": 545,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "@Preprocessor/Save_Preproc_Data.m",
			"settings":
			{
				"buffer_size": 1123,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/hofmannu/Code/arpreprocessor",
		"/home/hofmannu/Code/arpreprocessor/@Preprocessor",
		"/home/hofmannu/Code/arpreprocessor/@PreprocSettings",
		"/home/hofmannu/Code/arpreprocessor/Utility"
	],
	"file_history":
	[
		"/home/hofmannu/Code/arpreprocessor/@Preprocessor/Preproc_Data.m",
		"/home/hofmannu/Code/yamct/CMakeLists.txt",
		"/home/hofmannu/Code/yamct/src/imgui_plot.h",
		"/home/hofmannu/Code/yamct/src/imgui_plot.cpp",
		"/home/hofmannu/Code/mbr_aroam_transym/ExpModel/@ExperimentalModel/Plot_Result.m",
		"/home/hofmannu/Code/mbr_aroam_transym/ExpModel/@ExperimentalModel/VPrintf.m",
		"/home/hofmannu/Code/mbr_aroam_transym/ExpModel/@ExperimentalModel/Interpolate_Model.m",
		"/home/hofmannu/Code/mbr_aroam_transym/ExpModel/check_asym/build_data.m",
		"/home/hofmannu/Code/mbr_aroam_transym/ExpModel/check_asym/untitled",
		"/home/hofmannu/Code/mcxyz/mcxyz_22july2019/mcxyz.c",
		"/home/hofmannu/Code/arillumination/GUI/src/interface.cu",
		"/home/hofmannu/Code/arillumination/GUI/src/CMakeLists.txt",
		"/home/hofmannu/Code/arillumination/GUI/src/interface.cuh",
		"/home/hofmannu/Code/arillumination/GUI/src/mc.cu",
		"/home/hofmannu/Code/arillumination/GUI/src/optProperties.cpp",
		"/home/hofmannu/Code/arillumination/todo.txt",
		"/home/hofmannu/Code/arillumination/GUI/src/optVolume.h",
		"/home/hofmannu/Code/arillumination/GUI/src/optProperties.h",
		"/home/hofmannu/Code/arillumination/GUI/src/tube.h",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/CMakeLists.txt",
		"/home/hofmannu/Code/arillumination/GUI/src/mc.cuh",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/volume.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/structArgsIn.h",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/volume.h",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/interface.cu",
		"/home/hofmannu/Code/arillumination/GUI/src/tube.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/shell.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/optVolume.cpp",
		"/home/hofmannu/Code/arillumination/alternatives/small_mc.c",
		"/home/hofmannu/Code/arillumination/GUI/src/volume.h",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/simulation.cu",
		"/home/hofmannu/Code/arillumination/GUI/src/shape.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/fiberProperties.cpp",
		"/home/hofmannu/Code/arillumination/GUI/lib/imgui/docs/CHANGELOG.txt",
		"/home/hofmannu/Code/arillumination/arillumination.sublime-project",
		"/home/hofmannu/Code/arillumination/GUI/src/simProperties.cpp",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/simulation.cuh",
		"/home/hofmannu/Code/arillumination/GUI/src/box.h",
		"/home/hofmannu/Code/arillumination/GUI/src/fiberProperties.h",
		"/home/hofmannu/Code/arillumination/GUI/src/sphere.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/box.cpp",
		"/home/hofmannu/Code/arillumination/GUI/src/shell.h",
		"/home/hofmannu/Code/arillumination/GUI/src/sphere.h",
		"/home/hofmannu/Code/arillumination/GUI/src/shape.h",
		"/home/hofmannu/Code/mbr_aroam_transym/@ExperimentalModel/Center_Model.m",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/matlab_interfacing/loadModelH5.m",
		"/home/hofmannu/Code/mbr_aroam_transym/Utility/CUDA/gpuModelBasedTranslationalTran.cu",
		"/home/hofmannu/Code/mbr_aroam_transym/Utility/buildExpModel.m",
		"/home/hofmannu/Code/mbr_aroam_transym/@MBTransym/MBTransym.m",
		"/home/hofmannu/Code/mbr_aroam_transym/Utility/CUDA/gpuModelBasedTranslationalTranKernel.cu",
		"/home/hofmannu/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/lib/arillumination/GUI/src/mc.cu",
		"/home/hofmannu/Code/mbr_aroam/.gitmodules",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/lib/CMakeLists.txt",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/noise.cpp",
		"/home/hofmannu/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/hofmannu/Code/arillumination/Utility/getAbsorptionCoefficient.m",
		"/home/hofmannu/Code/mbr_aroam/CUDA/alonestanding/src/interface.cuh",
		"/home/hofmannu/Code/arillumination/GUI/CMakeLists.txt",
		"/home/hofmannu/Code/arillumination/GUI/src/simProperties.h",
		"/home/hofmannu/Code/arillumination/GUI/src/main.cu",
		"/home/hofmannu/Code/arillumination/GUI/src/fieldProperties.h",
		"/home/hofmannu/Code/arillumination/GUI/src/interface.h",
		"/home/hofmannu/Code/arillumination/GUI/src/interface.cpp"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 99.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"data"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "@Preprocessor/Preprocessor.m",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1905,
						"regions":
						{
						},
						"selection":
						[
							[
								265,
								265
							]
						],
						"settings":
						{
							"syntax": "Packages/Matlab/Matlab.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "@PreprocSettings/PreprocSettings.m",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1602,
						"regions":
						{
						},
						"selection":
						[
							[
								1381,
								1381
							]
						],
						"settings":
						{
							"syntax": "Packages/Matlab/Matlab.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "@Preprocessor/Detect_Surface.m",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5530,
						"regions":
						{
						},
						"selection":
						[
							[
								3285,
								3285
							]
						],
						"settings":
						{
							"syntax": "Packages/Matlab/Matlab.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Utility/skin_movement_model.m",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 545,
						"regions":
						{
						},
						"selection":
						[
							[
								262,
								262
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Matlab/Matlab.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "@Preprocessor/Save_Preproc_Data.m",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1123,
						"regions":
						{
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"syntax": "Packages/Matlab/Matlab.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.66,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "arpreprocessor.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"STRU",
				"GUI/src/structArgsIn.h"
			],
			[
				"tube",
				"GUI/src/tube.cpp"
			],
			[
				"optVol",
				"GUI/src/optVolume.h"
			],
			[
				"CMak",
				"GUI/src/CMakeLists.txt"
			],
			[
				"sta",
				"GUI/src/structArgsIn.h"
			],
			[
				"mc.cuh",
				"GUI/src/mc.cuh"
			],
			[
				"interf",
				"GUI/src/interface.cu"
			],
			[
				"struc",
				"GUI/src/structArgsIn.h"
			],
			[
				"mc.c",
				"GUI/src/mc.cu"
			],
			[
				"ba",
				"src/baseClass.h"
			],
			[
				"base",
				"src/baseClass.cpp"
			],
			[
				"sim",
				"src/simulation.cu"
			],
			[
				"n",
				"src/noise.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 2,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 270.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
